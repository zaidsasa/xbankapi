// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/zaidsasa/xbankapi/internal/storage"

	uuid "github.com/google/uuid"
)

// MockAccountStore is an autogenerated mock type for the AccountStore type
type MockAccountStore struct {
	mock.Mock
}

type MockAccountStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountStore) EXPECT() *MockAccountStore_Expecter {
	return &MockAccountStore_Expecter{mock: &_m.Mock}
}

// AddTransaction provides a mock function with given fields: ctx, arg
func (_m *MockAccountStore) AddTransaction(ctx context.Context, arg storage.AddTransactionParams) (storage.Transaction, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddTransaction")
	}

	var r0 storage.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.AddTransactionParams) (storage.Transaction, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.AddTransactionParams) storage.Transaction); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(storage.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.AddTransactionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStore_AddTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTransaction'
type MockAccountStore_AddTransaction_Call struct {
	*mock.Call
}

// AddTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - arg storage.AddTransactionParams
func (_e *MockAccountStore_Expecter) AddTransaction(ctx interface{}, arg interface{}) *MockAccountStore_AddTransaction_Call {
	return &MockAccountStore_AddTransaction_Call{Call: _e.mock.On("AddTransaction", ctx, arg)}
}

func (_c *MockAccountStore_AddTransaction_Call) Run(run func(ctx context.Context, arg storage.AddTransactionParams)) *MockAccountStore_AddTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.AddTransactionParams))
	})
	return _c
}

func (_c *MockAccountStore_AddTransaction_Call) Return(_a0 storage.Transaction, _a1 error) *MockAccountStore_AddTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStore_AddTransaction_Call) RunAndReturn(run func(context.Context, storage.AddTransactionParams) (storage.Transaction, error)) *MockAccountStore_AddTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccount provides a mock function with given fields: ctx, arg
func (_m *MockAccountStore) CreateAccount(ctx context.Context, arg storage.CreateAccountParams) (storage.Account, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 storage.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.CreateAccountParams) (storage.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.CreateAccountParams) storage.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(storage.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.CreateAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStore_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockAccountStore_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - arg storage.CreateAccountParams
func (_e *MockAccountStore_Expecter) CreateAccount(ctx interface{}, arg interface{}) *MockAccountStore_CreateAccount_Call {
	return &MockAccountStore_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, arg)}
}

func (_c *MockAccountStore_CreateAccount_Call) Run(run func(ctx context.Context, arg storage.CreateAccountParams)) *MockAccountStore_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.CreateAccountParams))
	})
	return _c
}

func (_c *MockAccountStore_CreateAccount_Call) Return(_a0 storage.Account, _a1 error) *MockAccountStore_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStore_CreateAccount_Call) RunAndReturn(run func(context.Context, storage.CreateAccountParams) (storage.Account, error)) *MockAccountStore_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, accountID
func (_m *MockAccountStore) GetAccount(ctx context.Context, accountID uuid.UUID) (storage.Account, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 storage.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (storage.Account, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) storage.Account); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Get(0).(storage.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStore_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockAccountStore_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID uuid.UUID
func (_e *MockAccountStore_Expecter) GetAccount(ctx interface{}, accountID interface{}) *MockAccountStore_GetAccount_Call {
	return &MockAccountStore_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, accountID)}
}

func (_c *MockAccountStore_GetAccount_Call) Run(run func(ctx context.Context, accountID uuid.UUID)) *MockAccountStore_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountStore_GetAccount_Call) Return(_a0 storage.Account, _a1 error) *MockAccountStore_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStore_GetAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) (storage.Account, error)) *MockAccountStore_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountTotalAmount provides a mock function with given fields: ctx, accountID
func (_m *MockAccountStore) GetAccountTotalAmount(ctx context.Context, accountID uuid.UUID) (pgtype.Numeric, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountTotalAmount")
	}

	var r0 pgtype.Numeric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (pgtype.Numeric, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) pgtype.Numeric); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Get(0).(pgtype.Numeric)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStore_GetAccountTotalAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountTotalAmount'
type MockAccountStore_GetAccountTotalAmount_Call struct {
	*mock.Call
}

// GetAccountTotalAmount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID uuid.UUID
func (_e *MockAccountStore_Expecter) GetAccountTotalAmount(ctx interface{}, accountID interface{}) *MockAccountStore_GetAccountTotalAmount_Call {
	return &MockAccountStore_GetAccountTotalAmount_Call{Call: _e.mock.On("GetAccountTotalAmount", ctx, accountID)}
}

func (_c *MockAccountStore_GetAccountTotalAmount_Call) Run(run func(ctx context.Context, accountID uuid.UUID)) *MockAccountStore_GetAccountTotalAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountStore_GetAccountTotalAmount_Call) Return(_a0 pgtype.Numeric, _a1 error) *MockAccountStore_GetAccountTotalAmount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStore_GetAccountTotalAmount_Call) RunAndReturn(run func(context.Context, uuid.UUID) (pgtype.Numeric, error)) *MockAccountStore_GetAccountTotalAmount_Call {
	_c.Call.Return(run)
	return _c
}

// HasAccount provides a mock function with given fields: ctx, accountID
func (_m *MockAccountStore) HasAccount(ctx context.Context, accountID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for HasAccount")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStore_HasAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasAccount'
type MockAccountStore_HasAccount_Call struct {
	*mock.Call
}

// HasAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID uuid.UUID
func (_e *MockAccountStore_Expecter) HasAccount(ctx interface{}, accountID interface{}) *MockAccountStore_HasAccount_Call {
	return &MockAccountStore_HasAccount_Call{Call: _e.mock.On("HasAccount", ctx, accountID)}
}

func (_c *MockAccountStore_HasAccount_Call) Run(run func(ctx context.Context, accountID uuid.UUID)) *MockAccountStore_HasAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountStore_HasAccount_Call) Return(_a0 bool, _a1 error) *MockAccountStore_HasAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStore_HasAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *MockAccountStore_HasAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountStore creates a new instance of MockAccountStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountStore {
	mock := &MockAccountStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
