// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "github.com/zaidsasa/xbankapi/internal/types"

	uuid "github.com/google/uuid"
)

// MockAccountService is an autogenerated mock type for the AccountService type
type MockAccountService struct {
	mock.Mock
}

type MockAccountService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountService) EXPECT() *MockAccountService_Expecter {
	return &MockAccountService_Expecter{mock: &_m.Mock}
}

// AddMoney provides a mock function with given fields: ctx, req, accountID
func (_m *MockAccountService) AddMoney(ctx context.Context, req *types.AddMoneyRequest, accountID uuid.UUID) (types.AddMoneyResponse, error) {
	ret := _m.Called(ctx, req, accountID)

	if len(ret) == 0 {
		panic("no return value specified for AddMoney")
	}

	var r0 types.AddMoneyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AddMoneyRequest, uuid.UUID) (types.AddMoneyResponse, error)); ok {
		return rf(ctx, req, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.AddMoneyRequest, uuid.UUID) types.AddMoneyResponse); ok {
		r0 = rf(ctx, req, accountID)
	} else {
		r0 = ret.Get(0).(types.AddMoneyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.AddMoneyRequest, uuid.UUID) error); ok {
		r1 = rf(ctx, req, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountService_AddMoney_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMoney'
type MockAccountService_AddMoney_Call struct {
	*mock.Call
}

// AddMoney is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.AddMoneyRequest
//   - accountID uuid.UUID
func (_e *MockAccountService_Expecter) AddMoney(ctx interface{}, req interface{}, accountID interface{}) *MockAccountService_AddMoney_Call {
	return &MockAccountService_AddMoney_Call{Call: _e.mock.On("AddMoney", ctx, req, accountID)}
}

func (_c *MockAccountService_AddMoney_Call) Run(run func(ctx context.Context, req *types.AddMoneyRequest, accountID uuid.UUID)) *MockAccountService_AddMoney_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.AddMoneyRequest), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountService_AddMoney_Call) Return(_a0 types.AddMoneyResponse, _a1 error) *MockAccountService_AddMoney_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountService_AddMoney_Call) RunAndReturn(run func(context.Context, *types.AddMoneyRequest, uuid.UUID) (types.AddMoneyResponse, error)) *MockAccountService_AddMoney_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccount provides a mock function with given fields: ctx, req
func (_m *MockAccountService) CreateAccount(ctx context.Context, req *types.CreateAccountRequest) (types.CreateAccountResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 types.CreateAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateAccountRequest) (types.CreateAccountResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateAccountRequest) types.CreateAccountResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.CreateAccountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateAccountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountService_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockAccountService_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateAccountRequest
func (_e *MockAccountService_Expecter) CreateAccount(ctx interface{}, req interface{}) *MockAccountService_CreateAccount_Call {
	return &MockAccountService_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, req)}
}

func (_c *MockAccountService_CreateAccount_Call) Run(run func(ctx context.Context, req *types.CreateAccountRequest)) *MockAccountService_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateAccountRequest))
	})
	return _c
}

func (_c *MockAccountService_CreateAccount_Call) Return(_a0 types.CreateAccountResponse, _a1 error) *MockAccountService_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountService_CreateAccount_Call) RunAndReturn(run func(context.Context, *types.CreateAccountRequest) (types.CreateAccountResponse, error)) *MockAccountService_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// TransferMoney provides a mock function with given fields: ctx, req, accountID
func (_m *MockAccountService) TransferMoney(ctx context.Context, req *types.TransferMoneyRequest, accountID uuid.UUID) (types.TransferMoneyResponse, error) {
	ret := _m.Called(ctx, req, accountID)

	if len(ret) == 0 {
		panic("no return value specified for TransferMoney")
	}

	var r0 types.TransferMoneyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.TransferMoneyRequest, uuid.UUID) (types.TransferMoneyResponse, error)); ok {
		return rf(ctx, req, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.TransferMoneyRequest, uuid.UUID) types.TransferMoneyResponse); ok {
		r0 = rf(ctx, req, accountID)
	} else {
		r0 = ret.Get(0).(types.TransferMoneyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.TransferMoneyRequest, uuid.UUID) error); ok {
		r1 = rf(ctx, req, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountService_TransferMoney_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferMoney'
type MockAccountService_TransferMoney_Call struct {
	*mock.Call
}

// TransferMoney is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.TransferMoneyRequest
//   - accountID uuid.UUID
func (_e *MockAccountService_Expecter) TransferMoney(ctx interface{}, req interface{}, accountID interface{}) *MockAccountService_TransferMoney_Call {
	return &MockAccountService_TransferMoney_Call{Call: _e.mock.On("TransferMoney", ctx, req, accountID)}
}

func (_c *MockAccountService_TransferMoney_Call) Run(run func(ctx context.Context, req *types.TransferMoneyRequest, accountID uuid.UUID)) *MockAccountService_TransferMoney_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.TransferMoneyRequest), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountService_TransferMoney_Call) Return(_a0 types.TransferMoneyResponse, _a1 error) *MockAccountService_TransferMoney_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountService_TransferMoney_Call) RunAndReturn(run func(context.Context, *types.TransferMoneyRequest, uuid.UUID) (types.TransferMoneyResponse, error)) *MockAccountService_TransferMoney_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountService creates a new instance of MockAccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountService {
	mock := &MockAccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
